// /* Get Permissions */
// const { permissions } = await Permissions.getAsync( Permissions.CONTACTS, Permissions.SMS, Permissions.NOTIFICATIONS )
// const toAsk = Object.keys(permissions).filter( x => permissions[x].status !== "granted" )
// if(toAsk.length > 0) await Permissions.askAsync(...toAsk)
//
//
// /* Get Contacts List */
// const { data } = await Contacts.getContactsAsync({
//   fields: [Contacts.Fields.Name],
// });
//


const DISCORD_CLIENT_ID = "503187612509536266"
const DISCORD_CLIENT_SECRET = "C5TyTelyRU3Kv4A6MCrSULVzjtXutdeA"
const DISCORD_API_ENDPOINT = 'https://discordapp.com/api/v6'
const DISCORD_SCOPE = "messages.read identify"



function JSON_to_URLEncoded(element,key,list){
  var list = list || [];
  if(typeof(element)=='object'){
    for (var idx in element)
      JSON_to_URLEncoded(element[idx],key?key+'['+idx+']':idx,list);
  } else {
    list.push(key+'='+encodeURIComponent(element));
  }
  return list.join('&');
}


X-Access-Token


constructor() {
  super();
  this.state = {
    groupme_token: null,
    groups:null,
  }
}

async loginAsync() {
  const redirectUrl = AuthSession.getRedirectUrl();
  const codeResult = await AuthSession.startAsync({
    authUrl: GROUPME_OAUTH_ENDPOINT
  });
  if( codeResult.type !== "success" ) throw new Exception("Auth Token Error")

  const groups = await fetch( GROUPME_API_ENDPOINT + "/groups", {
    headers: { "X-Access-Token" : codeResult.params.access_token }
  })

  this.setState({
    groupme_token: codeResult.params.access_token,
    groups: await groups.json()
  })


}
